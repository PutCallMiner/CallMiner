{%- macro tab_button(idx, current, is_icon = false, text = "" , title = "") -%}
    <a href="?tab={{ idx }}"
       class="{{ "icon-button" if is_icon else "" }} {{ "active" if idx == current else "" }}"
       title="{{ title }}"
       hx-get="?tab={{ idx }}"
       hx-target="closest .tabs"
       hx-swap="innerHTML"
       hx-trigger="click">
        {%- if is_icon -%}
            <span class="icon">{{ text }}</span>
        {%- else -%}
            {{ text }}
        {%- endif -%}
    </a>
{%- endmacro -%}
{%- macro progress_circle(link, delay = 0, load = True) -%}
{%- if load -%}
        <div class="progress"
             hx-get="{{ link }}"
             hx-target="this"
             hx-swap="outerHTML"
             hx-trigger="{{ "load delay:" ~ (delay * 10) ~ "s" }}">
            <svg viewBox="25 25 50 50">
                <circle r="20" cy="50" cx="50"></circle>
            </svg>
            <p>Analysis in progress...</p>
        </div>
    {%- else -%}
        {{ caller() }}
    {%- endif -%}
{%- endmacro -%}
{%- macro link(search = "", take = 20, skip = 0) -%}
    {%- if search != "" or take != 20 or skip != 0 -%}
        ?
    {%- endif -%}
    {%- if search != "" -%}
        search={{ search }}
    {%- endif -%}
    {%- if search != "" and take != 20 -%}
        &
    {%- endif -%}
    {%- if take != 20 -%}
        take={{ take }}
    {%- endif -%}
    {%- if (search != "" or take != 20) and skip != 0 -%}
        &
    {%- endif -%}
    {%- if skip != 0 -%}
        skip={{ skip }}
    {%- endif -%}
{%- endmacro -%}
{%- macro recording_url(value) -%}
    {{ value.split("/")[-1] .split(".")[0] }}
{%- endmacro -%}
{%- macro time_to_min(secs) -%}
    {{ "%02d:%02d"|format(secs // 60000, (secs // 1000) % 60)}}
{%- endmacro -%}
{%- macro format_duration(duration)-%}
    {% if duration %}{{ time_to_min(duration) ~ " (min:sec)" }}{% else %}-{% endif %}
{%- endmacro -%}
{%- macro transcript(recording, paragraph_class = "") -%}
    {% for i in range(recording.transcript.entries|count) %}
        {%- set entry = recording.transcript.entries[i] -%}
        <div class="transcript-entry" id={{ "entry-" ~ entry.start_time }} hx-on:click="skipToTime({{ entry.start_time / 1000 }})">
            <object class="avatar"></object>
            <header>
                {% set speaker = recording.speaker_mapping[entry.speaker] %}
                <span class="{{ speaker }}">{{ speaker }}</span>
                <span>{{ time_to_min(entry.start_time) }}</span>
            </header>
            <p class={{ paragraph_class }}>{{ caller(i) }}
            </p>
        </div>
    {% endfor %}
{%- endmacro -%}
{%- macro rating(score) -%}
    <div class="rating">
        <div style="{{ 'background-image: conic-gradient(var(--primary) ' ~ score ~ '%, transparent 0 100%);
                    ' }}">
            <span>{{ score }}</span>
        </div>
    </div>
{%- endmacro -%}
{% macro analyze_form(recording_id) %}
    <div class="analyze-row">
        <button id="analyze-button" type="button" onclick="sendAnalyzeRequest()">Analyze</button>
        <label>
            Force Rerun:
            <select id="force_rerun" name="force_rerun" required>
                <option value="none" selected>None</option>
                <option value="all">All</option>
                <option value="selected">Selected</option>
            </select>
        </label>
        <label><input type="checkbox" name="required_tasks" value="asr,speaker_class" checked disabled readonly>Transcript</label>
        <label><input type="checkbox" name="required_tasks" value="ner" checked>NER</label>
        <label><input type="checkbox" name="required_tasks" value="summary" checked>Summary</label>
        <label><input type="checkbox" name="required_tasks" value="conformity" checked>Conformity Check</label>
        <script>
            function sendAnalyzeRequest() {
                const recordingId = "{{ recording_id }}";
                const forceRerun = document.querySelector('#force_rerun').value;
                const requiredTasks = Array.from(document.querySelectorAll('input[name="required_tasks"]:checked'))
                    .map(input => input.value.split(",")).flat();

                const payload = {
                    recording_id: recordingId,
                    analyze_params: {
                        asr: {
                            language: "pl",
                            num_speakers: 2,
                            whisper_prompt: null
                        }
                    },
                    required_tasks: requiredTasks,
                    force_rerun: forceRerun,
                    task_timeout: 600
                };

                // TODO: THIS WHOLE CODE IS GARBAGE PROBABLY OMG
                fetch("/api/analysis", {
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    method: "POST",
                    body: JSON.stringify(payload)
                })
                .then((res) => {
                    console.log(res);
                    htmx.ajax("GET", document.querySelector("a.icon-button.active").getAttribute("hx-get"), ".tabs")
                    .catch((res)=>{console.log(res);});
                })
                .catch((res) => {
                    console.log(res);
                })

            }

            {# document.querySelector("#analyze-form").addEventListener("htmx:configRequest", function (event) {
                console.log("Running Listener");
                const recordingId = "{{ recording_id }}";
                const forceRerun = document.querySelector('#force_rerun').value;
                const requiredTasks = Array.from(document.querySelectorAll('input[name="required_tasks"]:checked'))
                    .map(input => input.value.split(",")).flat();

                const payload = {
                    recording_id: recordingId,
                    analyze_params: {
                        asr: {
                            language: "pl",
                            num_speakers: 2,
                            whisper_prompt: null
                        }
                    },
                    required_tasks: requiredTasks,
                    force_rerun: forceRerun,
                    task_timeout: 600
                };
                event.detail.headers["Content-Type"] = "application/json";
                event.detail.body = JSON.stringify(payload);
                console.log(event.detail);
            }); #}
        </script>
    </div>
{% endmacro %}