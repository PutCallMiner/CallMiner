{%- macro tab_button(idx, current, is_icon = false, text = "" , title = "") -%}
    <a href="?tab={{ idx }}"
       class="{{ "icon-button" if is_icon else "" }} {{ "active" if idx == current else "" }}"
       title="{{ title }}"
       hx-get="?tab={{ idx }}"
       hx-target="closest .tabs"
       hx-swap="innerHTML"
       hx-trigger="click"
       onclick="clearEntries()">
        {%- if is_icon -%}
            <span class="icon">{{ text }}</span>
        {%- else -%}
            {{ text }}
        {%- endif -%}
    </a>
{%- endmacro -%}
{%- macro progress_circle(link, delay = 0, load = True) -%}
    {%- if load -%}
        <div class="progress"
             hx-get="{{ link }}"
             hx-target="this"
             hx-swap="outerHTML"
             hx-trigger="{{ "load delay:" ~ (delay * 10) ~ "s" }}">
            <svg viewBox="25 25 50 50">
                <circle r="20" cy="50" cx="50"></circle>
            </svg>
            <p>Analysis in progress...</p>
        </div>
    {%- else -%}
        {{ caller() }}
    {%- endif -%}
{%- endmacro -%}
{%- macro link(search = "", take = 20, skip = 0) -%}
    {%- if search != "" or take != 20 or skip != 0 -%}
        ?
    {%- endif -%}
    {%- if search != "" -%}
        search={{ search }}
    {%- endif -%}
    {%- if search != "" and take != 20 -%}
        &
    {%- endif -%}
    {%- if take != 20 -%}
        take={{ take }}
    {%- endif -%}
    {%- if (search != "" or take != 20) and skip != 0 -%}
        &
    {%- endif -%}
    {%- if skip != 0 -%}
        skip={{ skip }}
    {%- endif -%}
{%- endmacro -%}
{%- macro time_to_min(secs) -%}
    {{ "%02d:%02d"|format(secs // 60000, (secs // 1000) % 60)}}
{%- endmacro -%}
{%- macro transcript(recording, paragraph_class = "") -%}
    {% for i in range(recording.transcript.entries|count) %}
        {%- set entry = recording.transcript.entries[i] -%}
        <div class="transcript-entry" id={{ "entry-" ~ entry.start_time }} hx-on:click="skipToTime({{ entry.start_time }})">
            <object class="avatar"></object>
            <header>
                {% set speaker = recording.speaker_mapping[entry.speaker] %}
                <span class="{{ speaker }}">{{ speaker }}</span>
                <span>{{ time_to_min(entry.start_time) }}</span>
            </header>
            <p class={{ paragraph_class }}>{{ caller(i) }}
            </p>
        </div>
    {% endfor %}
{%- endmacro -%}
{%- macro rating(score) -%}
    <div class="rating">
        <div style="{{ 'background-image: conic-gradient(var(--primary) ' ~ score ~ '%, transparent 0 100%);
                    ' }}">
            <span>{{ score }}</span>
        </div>
    </div>
{%- endmacro -%}
