{%- macro tab_button(idx, current, is_icon = false, text = "" , title = "", disabled = false) -%}
    <button class="{{ "icon" if is_icon else "" }} {{ "active" if idx == current else "" }}"
            title="{{ title }}"
            {% if disabled %}disabled{% endif %}
            hx-get="?tab={{ idx }}"
            hx-target="closest .tabs"
            hx-swap="innerHTML"
            onclick="clearEntries()">{{ text }}</button>
{%- endmacro -%}
{%- macro progress_circle(link, delay = 0, load = True) -%}
    {%- if load -%}
    {%- else -%}
        {{ caller() }}
    {%- endif -%}
{%- endmacro -%}
{%- macro link(search = "", take = 20, skip = 0) -%}
    {%- if search != "" or take != 20 or skip != 0 -%}
        ?
    {%- endif -%}
    {%- if search != "" -%}
        search={{ search }}
    {%- endif -%}
    {%- if search != "" and take != 20 -%}
        &
    {%- endif -%}
    {%- if take != 20 -%}
        take={{ take }}
    {%- endif -%}
    {%- if (search != "" or take != 20) and skip != 0 -%}
        &
    {%- endif -%}
    {%- if skip != 0 -%}
        skip={{ skip }}
    {%- endif -%}
{%- endmacro -%}
{%- macro time_to_min(secs) -%}
    {% if secs is none %}
        {{ "???" }}
    {% else %}
        {{ "%02d:%02d"|format(secs // 60000, (secs // 1000) % 60)}}
    {% endif %}
{%- endmacro -%}
{%- macro format_duration(duration) -%}
    {% if duration %}
        {{ time_to_min(duration) ~ " min" }}
    {% else %}
        -
    {% endif %}
{%- endmacro -%}
{%- macro transcript(recording, paragraph_class = "") -%}
    {% for i in range(recording.transcript.entries|count) %}
        {%- set entry = recording.transcript.entries[i] -%}
        {%- set speaker = recording.speaker_mapping[entry.speaker] -%}
        <div class="transcript-entry {{ speaker }}"
             id="{{ "entry-" ~ entry.start_time }}"
             hx-on:click="skipToTime({{ entry.start_time }})">
            <p class={{ paragraph_class }}>
                {{ caller(i) }}
            </p>
            <span><span>{{ speaker }}</span> {{ time_to_min(entry.start_time) }}</span>
        </div>
    {% endfor %}
{%- endmacro -%}
{%- macro rating(score, background = "secondary") -%}
    <div class="rating" style="background-color: var(--{{ background }});">
        <div style="{{ 'background-image: conic-gradient(var(--primary) ' ~ score ~ '%, transparent 0 100%);
                    ' }}">
            <span>{{ score }}</span>
        </div>
    </div>
{%- endmacro -%}
{% macro analyze_form(recording_id) %}
    <div class="analyze-row">
        <button id="analyze-button" type="button" onclick="sendAnalyzeRequest()">Analyze</button>
        <label>
            Force Rerun:
            <select id="force_rerun" name="force_rerun" required>
                <option value="none" selected>None</option>
                <option value="all">All</option>
                <option value="selected">Selected</option>
            </select>
        </label>
        <label>
            <input type="checkbox"
                   name="required_tasks"
                   value="asr,speaker_class"
                   checked
                   disabled
                   readonly>
            Transcript
        </label>
        <label>
            <input type="checkbox" name="required_tasks" value="ner" checked>
            NER
        </label>
        <label>
            <input type="checkbox" name="required_tasks" value="summary" checked>
            Summary
        </label>
        <label>
            <input type="checkbox" name="required_tasks" value="conformity" checked>
            Conformity Check
        </label>
        <script>
            function sendAnalyzeRequest() {
                const recordingId = "{{ recording_id }}";
                const forceRerun = document.querySelector('#force_rerun').value;
                const requiredTasks = Array.from(document.querySelectorAll('input[name="required_tasks"]:checked'))
                    .map(input => input.value.split(",")).flat();

                const payload = {
                    recording_id: recordingId,
                    analyze_params: {
                        asr: {
                            language: "pl",
                            num_speakers: 2,
                            whisper_prompt: null
                        }
                    },
                    required_tasks: requiredTasks,
                    force_rerun: forceRerun,
                    task_timeout: 600
                };

                // TODO: THIS WHOLE CODE IS GARBAGE PROBABLY OMG
                fetch("/api/analysis", {
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    method: "POST",
                    body: JSON.stringify(payload)
                })
                .then((res) => {
                    console.log(res);
                    htmx.ajax("GET", document.querySelector("a.icon-button.active").getAttribute("hx-get"), ".tabs")
                    .catch((res)=>{console.log(res);});
                })
                .catch((res) => {
                    console.log(res);
                })

            }
        </script>
    </div>
{% endmacro %}
{%- macro agent(agent) -%}
    <button class="chip" tabindex="1">
        <object class="avatar"></object>
        {% if agent %}
            {{ agent.name }}
        {% else %}
            Unknown
        {% endif %}
    </button>
{%- endmacro -%}
